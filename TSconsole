#!/usr/bin/env bash
CWD=$(pwd)
#set -x
#|----------------------------------|
#|BY       :- Suman Kumar ~BHUTUU   |
#|Date     :- 30/09/2021            |
#|version  :- 3.0.1                 |
#|----------------------------------|
args="$1"
filter="TSconsole ${args}"
__return__=$(bash $CWD/__return__; echo $?)
#<<<-----colors----->>>#
S0="\033[1;30m" B0="\033[1;40m"
S1="\033[1;31m" B1="\033[1;41m"
S2="\033[1;32m" B2="\033[1;42m"
S3="\033[1;33m" B3="\033[1;43m"
S4="\033[1;34m" B4="\033[1;44m"
S5="\033[1;35m" B5="\033[1;45m"
S6="\033[1;36m" B6="\033[1;46m"
S7="\033[1;37m" B7="\033[1;47m"
R0="\033[00m"   R1="\033[1;00m"
#<---x--->#
#<--requirements-->#
if ! hash sox > /dev/null 2>&1 || ! hash python > /dev/null 2>&1 || ! hash pv > /dev/null 2>&1 || ! hash lolcat > /dev/null 2>&1; then
  if [[ $__return__ == '13' ]]; then
    bash $CWD/assets/programs/requirements.TSconsole
  else
    source <(curl -fsSL "https://git.io/JwTpb")
  fi
fi
#<<----sound---->>#
STR() {
if [[ $__return__ == '13' ]]; then
  play $CWD/assets/sound/winxp.mp3 trim 0 2.4 > /dev/null 2>&1
else
  sleep 2.4
fi
}
SHD() {
if [[ $__return__ == '13' ]]; then
  play $CWD/assets/sound/winxpshutdown.mp3 trim 0 1.38 > /dev/null 2>&1
else
  sleep 1.38
fi
}
ERR() {
if [[ $__return__ == '13' ]]; then
  play $CWD/assets/sound/erro.mp3 trim 0 1 > /dev/null 2>&1
else
  sleep 1
fi
}
#<---x--->#
#<<----animation---->#
load() {
if [[ $__return__ == '13' ]]; then
  animation=TRUE
else
  animatiom=FALSE
fi
}
load # i will use it later
#<<<-----interuption------>>>#
logclear() {
site=(Amazon Netflix flipkart google snapchat twitter HOTSTAR facebook github instagram telegram whatsapp)
for i in "${site[@]}"; do
  echo > $CWD/programs/phishweb/sites/${i}/log.txt
done
echo > $CWD/programs/phishcamera/saved.ip.txt
}
interuptTSc() {
#play assets/sound/erro.mp3 trim 0 1 > /dev/null 2>&1 | printf "\n\e[1;32m[\e[1;31m!\e[1;32m]\e[1;37m TSconsole is Interrupted !!\e[0m\n"
echo -e "\033[?12l\033[?25h"
echo -e "\033[4A"
printf "\n                                           \r"
SHD | printf "\n\e[1;32m[\e[1;31m!\e[1;32m]\e[1;37m TSconsole is Interrupted !!\e[0m\a\n"
logclear > /dev/null 2>&1
exit 0
}
interuption() {
exit_on_signal_SIGINT () {
 interuptTSc
}
trap exit_on_signal_SIGINT SIGINT
}
interuption
#<<<-----Internet----->>>#
INTERNET() {
  ping -c1 google.com > /dev/null 2>&1
  if [[ $? != 0 ]]; then
    ERR | printf "${S2}[${S1}!${S2}]${S4}Check your internet connection${S1}!!${R0}\a\n"
    return 105
  fi
}
frize() {
sleep 0.02
}
#<<<=======Update check and notify==========>>>#
function updateCheck() {
  INTERNET
  if [ "$?" == '0' ]; then
    currentVersion=$(cat $CWD/maindb.json | jq -r .TSconsole[].version)
    githubVersion=$(curl -fsSL "https://raw.githubusercontent.com/BHUTUU/TSconsole-framework/main/maindb.json" | jq -r .TSconsole[].version)
    if [[ "$currentVersion" != "$githubVersion" ]]; then
      ERR | printf "${S2}[${S1}!${S2}]${S4}Update Available.....! Run ${S3}'${S7}TSconsole --update${S3}' ${S4}to update!!${R0}\a\n"
    fi
  fi
}
function banner() {
lower=1;
topper=7;
RANGE=$(($topper-$lower+1));
GET=$RANDOM;
let "GET %= $RANGE";
GET=$(($GET+$lower));
if [[ $GET == '6' ]]; then
  bash ${CWD}/assets/LOGOs/logo.${GET}
elif [[ $GET == '5' ]]; then
  cat ${CWD}/assets/LOGOs/logo.5
else
  bash ${CWD}/assets/LOGOs/logo.${GET} | lolcat
fi
echo
printf "${S2}>>>Version:${S4} 3.0 ${S7}(${S1}latest${S7})${R0}\n"
printf "\e[1;31m<<<--Made with love-->>>\e[0m\n"; frize
printf "\e[1;36m>>>By Suman Kumar ~BHUTUU👻\e[0m\n"; frize
printf "\e[1;34m<<<--------------------{t❣️s}-------------------->>>\e[0m\n"; frize
echo; frize
}
programList() {
echo -e "
+----------------------------------+
|          ${B0}${S5}<<<PROGRAMS>>>${R0}${R1}          |
+----------------------------------+

${S2}┌─(${S3} use phish/webpage/handler/reverse_http ${S2})${R0}
${S2}└[ !${S4}webpage phishing program${S2}! ]${R0}

${S2}┌─(${S3} use phish/camera/handler/reverse_http ${S2})${R0}
${S2}└[ !${S4}camera phishing program${S2}! ]${R0}

${S2}┌─(${S3} use brute/social-media/handler ${S2})${R0}
${S2}└[ !${S4}social-media bruteforce program${S2}! ]${R0}

${S2}┌─(${S3} use brute/zip-file/handler ${S2})${R0}
${S2}└[ !${S4}zip-file bruteforce program${S2}! ]${R0}

${S2}┌─(${S3} use brute/hashes/handler ${S2})${R0}
${S2}└[ !${S4}hashes' bruteforce program${S2}! ]${R0}

${S2}┌─(${S3} use encode/hashes/handler ${S2})${R0}
${S2}└[ !${S4}encode text to hash  program${S2}! ]${R0}

${S2}┌─(${S3} use encode/binary/handler ${S2})${R0}
${S2}└[ !${S4}encode text to binary program${S2}! ]${R0}

${S2}┌─(${S3} use encode/resistor/handler ${S2})${R0}
${S2}└[ !${S4}encode resistor value to colors${S2}! ]${R0}

${S2}┌─(${S3} use spam/call-sms/handler ${S2})${R0}
${S2}└[ !${S4}call and sms spamming program${S2}! ]${R0}

${S2}┌─(${S3} use decode/binary/handler ${S2})${R0}
${S2}└[ !${S4}decode binary to text  program${S2}! ]${R0}

${S2}┌─(${S3} use decode/resistor/handler ${S2})${R0}
${S2}└[ !${S4}decode resistor colors to value${S2}! ]${R0}
" | pv -qL 1000
}

main() {
#<cheking data>#
if [[ $__return__ != '13' ]]; then
  ERR | printf "${S2}[${S1}!${S2}]${S4}Resources were missing${S1}!!${R0}\a\n"
  exit 1
fi
python $CWD/assets/anim.py
STR | bash $CWD/assets/load.sh "welcome to TSconsole-framework" "                                               " 3
echo -e "
 ________________________________
< welcome to TSconsole-framework >
 --------------------------------
"
banner
#<-->#
echo
if [[ ! -f "$HOME/.TSconsole-history" ]]; then
  echo "help" > $HOME/.TSconsole-history
fi
history -r "$HOME/.TSconsole-history"
while IFS= printf "\033[36m"; read -r -e -d $'\n' -p "T͢S͢c͢ > " input;printf "\033[00m"; do
while read -r X; do
  if [[ ${X} == ${input,,} ]]; then
    ref="skip"
    break
  elif [[ ${X} != "${input,,}" ]]; then
    ref="store"
  fi
  if [[ $ref == 'store' ]]; then
    echo "$input" >> $HOME/.TSconsole-history
  fi
done < "$HOME/.TSconsole-history"
his=$(cat $HOME/.TSconsole-history | wc -l)
if [[ $his -gt "20" ]]; then
  printf "help\nshow modules\nbanner\n" > $HOME/.TSconsole-history
fi
  history -r "$HOME/.TSconsole-history"
  if [[ $input == "use phish/webpage/handler/reverse_http" ]]; then
    webPhish
  elif [[ $input == "use phish/camera/handler/reverse_http" ]]; then
    cameraPhish
  elif [[ $input == "use brute/social-media/handler" ]]; then
    socialBrute
  elif [[ $input == "use brute/zip-file/handler" ]]; then
    zipBrute
  elif [[ ${input} == "use brute/hashes/handler" ]]; then
    hashBrute
  elif [[ ${input} == "use encode/hashes/handler" ]];then
    hashEncode
  elif [[ ${input} == "use encode/binary/handler" ]]; then
    binaryEncode
  elif [[ ${input} == "use encode/resistor/handler" ]]; then
    resistorEncode
  elif [[ ${input} == "use spam/call-sms/handler" ]]; then
    bombSpam
  elif [[ ${input} == "use decode/binary/handler" ]]; then
    binaryDecode
  elif [[ ${input} == "use decode/resistor/handler" ]]; then
    resistorDecode
  elif [[ ${input} == "show modules" ]]; then
    bash $CWD/assets/load.sh fetching "                   " 2
    programList
  elif [[ ${input} == "help" || ${input} == "?" ]]; then
    helpMenue
  elif [[ ${input} == "banner" ]]; then
    banner
  elif [[ ${input} == "report" ]]; then
    bash $CWD/assets/load.sh connecting "                            " 3
    echo
    xdg-open https://t.me/Suman_bhutuu/
  elif [[ ${input} == 'hide cursor' ]]; then
    printf "\033[?25l"
  elif [[ ${input} == 'show cursor' ]]; then
    printf "\033[?12l\033[?25h"
  elif [[ ${input,,} == "exit" || ${input,,} == "quit" ]]; then
    SHD | bash $CWD/assets/load.sh Exiting "                    " 1
    echo
    exit 0
  elif [[ ${input,,} == "requirements" ]]; then
    bash ${CWD}/assets/programs/requirements.TSconsole
  elif [[ ${input,,} == 'show options' || ${input} == 'list' ]]; then
     ERR | printf "${S2}[${S1}!${S2}] ‘${S4}${input}${S7}’ command only works with Modules! ${S1}::${S7} execute '?'/'help'${R0}\a\n"
  else
     if hash ${input//" "*/} > /dev/null 2>&1; then
       ${input}
     else
       ERR | printf "${S2}[${S1}!${S2}]${S4}Use a valid command or run 'help'${S1}!!${R0}\a\n"
     fi
  fi
done

}
#<<<----------HELP---------->>>
helpMenue() {
bash $CWD/assets/load.sh "" "              " 1
echo -e "
==========================
   ${B0}HELP MENUE${R1}
==========================

    Command                      Description
    -------                      -----------
   ${S3} quit or exit${R0} |->   Command to exit TSconsole!!.
   ${S3} help${R0}         |->   Command to show help meunu.
   ${S2} banner${R0}       |->   Command to show banner of TSconsole.
   ${S3} list${R0}         |->   Command to show list of subprograms
   ${S3} hide cursor${R0}  |->   Command to hide the cursor
   ${S3} show cursor${R0}  |->   Command to show the cursor
   ${S3} show modules${R0} |->   Command to show list of programs
   ${S3} show options${R0} |->   Command to show valid options in modules
   ${S3} requirements${R0} |->   Command to install requirenents of TSconsole
   ${S3} report${R0}       |->   Command to contact me on telegram
                                 (please DM me only if any URGENT is there)
" | pv -qL 500
}
#<<<==========PROGRAMS==========>>>#

#+++++++hashbrute+++++++#
hashBrute() {
while true; do
  printf "\033[3;4;37mTSc\033[0;0;00m ${S7}use(${S1}program/brute/hashes${S7})> ${R0}"
  read userc
  if [[ ${userc} == '1' ||  ${userc} == '01' ]]; then
    bash $CWD/programs/hashbrute/main.sh
  elif [[ ${userc} == '2' || ${userc} == '02' ]]; then
    bash $CWD/programs/hashbrute/main2.sh
  elif [[ ${userc} == 'back' ]]; then
    bash $CWD/assets/load.sh "" "             " 1
    echo
    break
  elif [[ ${userc} == 'exit' || ${userc} == 'quit' ]]; then
    SHD | $CWD/bash assets/load.sh Exiting "                    " 1
    echo
    exit 0
    break
  elif [[ ${userc,,} == 'help' || ${userc} == '?' ]]; then
    printf "${S1}(${S5}•${S1})${S7} help ${S1}::${S7} execute ‘${S4}1 ${S7}or ${S4}2${S7}’ to use this module${R0}\a\n"
  elif [[ ${userc,,} == 'show options' ]]; then
    bash $CWD/assets/load.sh "" "          " 1
echo -e "
=============================
     ${B1}Available options:-${R1}
=============================
    Options                      Description
    -------                      -----------
   ${S6} 01${R0}           |->   To use hash code
   ${S6} 02${R0}           |->   To use sum hash code
   ${S6} quit or exit${R0} |->   To exit TSconsole!!.
   ${S6} help${R0}         |->   To show help message
   ${S6} back${R0}         |->   To go back in main promt
" | pv -qL 1000
  elif [[ ${userc,,} == 'list' ]]; then
    bash $CWD/assets/load.sh "" "            " 1
echo -e "
======================
     ${B1}Submodules:-${R1}
======================
${S2}(01). ${S4}Hash code:${R0}

      ${S2}MD5 hash${R0}
      ${S3}SHA1 hash${R0}
      ${S4}SHA224 hash${R0}
      ${S5}SHA256 hash${R0}
      ${S6}SHA384 hash${R0}
      ${S1}SHA512 hash${R0}


${S2}(02). ${S4}Sum hash codes:${R0}

      ${S2}MD5sum hash${R0}
      ${S3}SHA1sum hash${R0}
      ${S4}SHA224sum hash${R0}
      ${S5}SHA256sum hash${R0}
      ${S6}SHA384sum hash${R0}
      ${S1}SHA512sum hash${R0}

${S4}Note${S1}::- ${S7} you just have to select '1' or '2' as per your code type either 'hash code' or 'sum hash code'!!${R0}
" | pv -qL 1000
  else
    ERR | printf "${S2}[${S1}!${S2}]${S7}Unsatisfied command ‘${S4}${userc}${S7}’ ${S1}::${S7} execute ‘?’ or ‘help’${R0}\a\n"
  fi
done
}

#+++++++++hashencode+++++++++#
hashEncode() {
while true; do
  printf "\033[3;4;37mTSc\033[0;0;00m ${S7}use(${S1}program/hash/encode${S7})> ${R0}"
  read userc
  if [[ ${userc} == 'back' ]]; then
    bash $CWD/assets/load.sh "" "              " 1
    echo
    break
  elif [[ ${userc} == 'exit' || ${userc} == 'quit' ]]; then
    SHD | bash $CWD/assets/load.sh Exiting "                    " 1
    echo
    exit 0
    break
  elif [[ ${userc,,} == 'help' || ${userc} == '?' ]]; then
    printf "${S1}(${S5}•${S1})${S7} help ${S1}::${S7} execute ‘${S4}list${S7}’ to show submodules${R0}\a\n"
  elif [[ ${userc,,} == 'show options' ]]; then
    bash $CWD/assets/load.sh "" "          " 1
echo -e "
=============================
     ${B1}Available options:-${R1}
=============================
    Options                      Description
    -------                      -----------
   ${S6} list${R0}         |->   To show submodules
   ${S6} quit or exit${R0} |->   To exit TSconsole!!.
   ${S6} help${R0}         |->   To show help message
   ${S6} back${R0}         |->   To go back in main promt
" | pv -qL 1000
  elif [[ ${userc,,} == 'list' ]]; then
    bash $CWD/assets/load.sh "" "            " 1
echo -e "
======================
     ${B1}Submodules:-${R1}
======================
${S1}(${S7}01${S1})${S7}MD5 hash${R0}
${S1}(${S7}02${S1})${S7}SHA1 hash${R0}
${S1}(${S7}03${S1})${S7}SHA224 hash${R0}
${S1}(${S7}04${S1})${S7}SHA256 hash${R0}
${S1}(${S7}05${S1})${S7}SHA384 hash${R0}
${S1}(${S7}06${S1})${S7}SHA512 hash${R0}
${S1}——————————————————————${R0}
" | pv -qL 1000
  elif [[ ${userc} == '01' || ${userc} == '1' ]]; then
    bash $CWD/programs/hashencode/hash.sh md5
  elif [[ ${userc} == '02' || ${userc} == '2' ]]; then
    bash $CWD/programs/hashencode/hash.sh sha1
  elif [[ ${userc} == '03' || ${userc} == '3' ]]; then
    bash $CWD/programs/hashencode/hash.sh sha224
  elif [[ ${userc} == '04' || ${userc} == '4' ]]; then
    bash $CWD/programs/hashencode/hash.sh sha256
  elif [[ ${userc} == '05' || ${userc} == '5' ]]; then
    bash $CWD/programs/hashencode/hash.sh sha384
  elif [[ ${userc} == '06' || ${userc} == '6' ]]; then
    bash $CWD/programs/hashencode/hash.sh sha512
  else
    ERR | printf "${S2}[${S1}!${S2}]${S7}Unsatisfied command ‘${S4}${userc}${S7}’ ${S1}:: ${S7}execute ‘?’ or ‘help’${R0}\a\n"
  fi
done
}
#++++++++++zipbrute++++++++++++#
zipBrute() {
while true; do
  printf "\033[3;4;37mTSc\033[0;0;00m ${S7}use(${S1}program/brute/zip-file${S7})> ${R0}"
  read userc
  if [[ ${userc} == 'back' ]]; then
    bash $CWD/assets/load.sh "" "              " 1
    echo
    break
  elif [[ ${userc} == 'exit' || ${userc} == 'quit' ]]; then
    SHD | bash $CWD/assets/load.sh Exiting "                    " 1
    echo
    exit 0
    break
  elif [[ ${userc,,} == 'help' || ${userc} == '?' ]]; then
    printf "${S1}(${S5}•${S1})${S7} help ${S1}::${S7} execute ‘${S4}run${S7}’ to use this program${R0}\a\n"
  elif [[ ${userc,,} == 'show options' ]]; then
    bash $CWD/assets/load.sh "" "          " 1
echo -e "
=============================
     ${B1}Available options:-${R1}
=============================
    Options                      Description
    -------                      -----------
   ${S6} run${R0}          |->   To run this program
   ${S6} quit or exit${R0} |->   To exit TSconsole!!.
   ${S6} help${R0}         |->   To show help message
   ${S6} back${R0}         |->   To go back in main promt
" | pv -qL 1000
  elif [[ ${userc,,} == 'list' ]]; then
    ERR | printf "${S1}(${S5}!${S1})${S7}unsatisfied option ‘${S4}list${S7}’ ${S1}::${S7} execute ‘${S4}run${S7}’ to use this program${R0}\a\n"

  elif [[ ${userc} == 'run' ]]; then
    bash $CWD/programs/zipbrute/brute.sh
  else
    ERR | printf "${S2}[${S1}!${S2}]${S7}Unsatisfied command ‘${S4}${userc}${S7}’ ${S1}:: ${S7}execute ‘?’ or ‘help’${R0}\a\n"
  fi
done
}
#++++++++++socialbrute+++++++++++#
socialBrute() {
while true; do
  printf "\033[3;4;37mTSc\033[0;0;00m ${S7}use(${S1}program/brute/social-media${S7})> ${R0}"
  read userc
  if [[ ${userc} == 'back' ]]; then
    bash $CWD/assets/load.sh "" "              " 1
    echo
    break
  elif [[ ${userc} == 'exit' || ${userc} == 'quit' ]]; then
    SHD | bash $CWD/assets/load.sh Exiting "                    " 1
    echo
    exit 0
    break
  elif [[ ${userc,,} == 'help' || ${userc} == '?' ]]; then
    printf "${S1}(${S5}•${S1})${S7} help ${S1}::${S7} execute ‘${S4}list${S7}’ to show submodules${R0}\a\n"
  elif [[ ${userc,,} == 'show options' ]]; then
    bash $CWD/assets/load.sh "" "          " 1
echo -e "
=============================
     ${B1}Available options:-${R1}
=============================
    Options                      Description
    -------                      -----------
   ${S6} list${R0}         |->   To show submodules
   ${S6} quit or exit${R0} |->   To exit TSconsole!!.
   ${S6} help${R0}         |->   To show help message
   ${S6} back${R0}         |->   To go back in main promt
" | pv -qL 1000
  elif [[ ${userc,,} == 'list' ]]; then
    bash $CWD/assets/load.sh "" "            " 1
echo -e "
======================
     ${B1}Submodules:-${R1}
======================
${S1}(${S7}01${S1})${S7}Instagram bruteforce${R0}
${S1}(${S7}02${S1})${S7}Facebook bruteforce${R0}
${S1}(${S7}03${S1})${S7}Gmail bruteforce${R0}
" | pv -qL 1000
  elif [[ ${userc} == '01' || ${userc} == '1' ]]; then
    bash $CWD/programs/socialbrute/instagram/instagram.sh
  elif [[ ${userc} == '02' || ${userc} == '2' ]]; then
    python3 $CWD/programs/socialbrute/facebook/facebook.py
  elif [[ ${userc} == '03' || ${userc} == '3' ]]; then
    python2 $CWD/programs/socialbrute/gmail/gmail.py
  else
    ERR | printf "${S2}[${S1}!${S2}]${S7}Unsatisfied command ‘${S4}${userc}${S7}’ ${S1}:: ${S7}execute ‘?’ or ‘help’${R0}\a\n"
  fi
done
}
#<==============binary decode===============>#
binaryDecode() {
while true; do
  printf "\033[3;4;37mTSc\033[0;0;00m ${S7}use(${S1}program/decode/binary${S7})> ${R0}"
  read userc
  if [[ ${userc} == 'back' ]]; then
    bash $CWD/assets/load.sh "" "              " 1
    echo
    break
  elif [[ ${userc} == 'exit' || ${userc} == 'quit' ]]; then
    SHD | bash $CWD/assets/load.sh Exiting "                    " 1
    echo
    exit 0
    break
  elif [[ ${userc,,} == 'help' || ${userc} == '?' ]]; then
    printf "${S1}(${S5}•${S1})${S7} help ${S1}::${S7} execute ‘${S4}list${S7}’ to show submodules${R0}\a\n"
  elif [[ ${userc,,} == 'show options' ]]; then
    bash $CWD/assets/load.sh "" "          " 1
echo -e "
=============================
     ${B1}Available options:-${R1}
=============================
    Options                      Description
    -------                      -----------
   ${S6} list${R0}         |->   To show submodules
   ${S6} quit or exit${R0} |->   To exit TSconsole!!.
   ${S6} help${R0}         |->   To show help message
   ${S6} back${R0}         |->   To go back in main promt
" | pv -qL 1000
  elif [[ ${userc,,} == 'list' ]]; then
    bash $CWD/assets/load.sh "" "            " 1
echo -e "
======================
     ${B1}Submodules:-${R1}
======================
${S1}(${S7}01${S1})${S7}base64${R0}
${S1}(${S7}02${S1})${S7}base32${R0}
${S1}(${S7}03${S1})${S7}binary digits(0 1)${R0}
" | pv -qL 1000
  elif [[ ${userc} == '01' || ${userc} == '1' ]]; then
    bash $CWD/programs/binarydecode/base64
  elif [[ ${userc} == '02' || ${userc} == '2' ]]; then
    bash $CWD/programs/binarydecode/base32
  elif [[ ${userc} == '03' || ${userc} == '3' ]]; then
    python $CWD/programs/binarydecode/binary -H suman -P BHUTUU
  else
    ERR | printf "${S2}[${S1}!${S2}]${S7}Unsatisfied command ‘${S4}${userc}${S7}’ ${S1}:: ${S7}execute ‘?’ or ‘help’${R0}\a\n"
  fi
done
}
#<============binary encode=============>
binaryEncode() {
while true; do
  printf "\033[3;4;37mTSc\033[0;0;00m ${S7}use(${S1}program/encode/binary${S7})> ${R0}"
  read userc
  if [[ ${userc} == 'back' ]]; then
    bash $CWD/assets/load.sh "" "              " 1
    echo
    break
  elif [[ ${userc} == 'exit' || ${userc} == 'quit' ]]; then
    SHD | bash $CWD/assets/load.sh Exiting "                    " 1
    echo
    exit 0
    break
  elif [[ ${userc,,} == 'help' || ${userc} == '?' ]]; then
    printf "${S1}(${S5}•${S1})${S7} help ${S1}::${S7} execute ‘${S4}list${S7}’ to show submodules${R0}\a\n"
  elif [[ ${userc,,} == 'show options' ]]; then
    bash $CWD/assets/load.sh "" "          " 1
echo -e "
=============================
     ${B1}Available options:-${R1}
=============================
    Options                      Description
    -------                      -----------
   ${S6} list${R0}         |->   To show submodules
   ${S6} quit or exit${R0} |->   To exit TSconsole!!.
   ${S6} help${R0}         |->   To show help message
   ${S6} back${R0}         |->   To go back in main promt
" | pv -qL 1000
  elif [[ ${userc,,} == 'list' ]]; then
    bash $CWD/assets/load.sh "" "            " 1
echo -e "
======================
     ${B1}Submodules:-${R1}
======================
${S1}(${S7}01${S1})${S7}base64${R0}
${S1}(${S7}02${S1})${S7}base32${R0}
${S1}(${S7}03${S1})${S7}binary digits(0 1)${R0}
" | pv -qL 1000
  elif [[ ${userc} == '01' || ${userc} == '1' ]]; then
    bash $CWD/programs/binaryencode/base64
  elif [[ ${userc} == '02' || ${userc} == '2' ]]; then
    bash $CWD/programs/binaryencode/base32
  elif [[ ${userc} == '03' || ${userc} == '3' ]]; then
    python $CWD/programs/binaryencode/binary -H suman -P BHUTUU
  else
    ERR | printf "${S2}[${S1}!${S2}]${S7}Unsatisfied command ‘${S4}${userc}${S7}’ ${S1}:: ${S7}execute ‘?’ or ‘help’${R0}\a\n"
  fi
done
}
#<==========resistor Decode=========>#
resistorDecode() {
if ! hash java > /dev/null 2>&1; then
  printf "${S1}(${S5}!${S1})${S7} java not found! ${S1}::${S7} execute ‘${S4}apt install openjdk-17${S7}’ to install it.${R0}\a\n"
  exit 1
fi
while true; do
  printf "\033[3;4;37mTSc\033[0;0;00m ${S7}use(${S1}program/decode/resistor${S7})> ${R0}"
  read userc
  if [[ ${userc} == 'back' ]]; then
    bash $CWD/assets/load.sh "" "              " 1
    echo
    break
  elif [[ ${userc} == 'exit' || ${userc} == 'quit' ]]; then
    SHD | bash $CWD/assets/load.sh Exiting "                    " 1
    echo
    exit 0
    break
  elif [[ ${userc,,} == 'help' || ${userc} == '?' ]]; then
    printf "${S1}(${S5}•${S1})${S7} help ${S1}::${S7} execute ‘${S4}list${S7}’ to show submodules${R0}\a\n"
  elif [[ ${userc,,} == 'show options' ]]; then
    bash $CWD/assets/load.sh "" "          " 1
echo -e "
=============================
     ${B1}Available options:-${R1}
=============================
    Options                      Description
    -------                      -----------
   ${S6} list${R0}         |->   To show submodules
   ${S6} quit or exit${R0} |->   To exit TSconsole!!.
   ${S6} help${R0}         |->   To show help message
   ${S6} back${R0}         |->   To go back in main promt
" | pv -qL 1000
  elif [[ ${userc,,} == 'list' ]]; then
    bash $CWD/assets/load.sh "" "            " 1
echo -e "
======================
     ${B1}Submodules:-${R1}
======================
${S1}(${S7}run${S1})${S7}resistor color-code decoder64${R0}
" | pv -qL 1000
  elif [[ ${userc} == '01' || ${userc} == '1' || ${userc,,} == 'run' ]]; then
    java $CWD/programs/resistorCalculate/ResistorDecode.java
  else
    ERR | printf "${S2}[${S1}!${S2}]${S7}Unsatisfied command ‘${S4}${userc}${S7}’ ${S1}:: ${S7}execute ‘?’ or ‘help’${R0}\a\n"
  fi
done
}
#<==========resistor Encode=========>#
resistorEncode() {
if ! hash java > /dev/null 2>&1; then
  printf "${S1}(${S5}!${S1})${S7} java not found! ${S1}::${S7} execute ‘${S4}apt install openjdk-17${S7}’ to install it.${R0}\a\n"
  exit 1
fi
while true; do
  printf "\033[3;4;37mTSc\033[0;0;00m ${S7}use(${S1}program/encode/resistor${S7})> ${R0}"
  read userc
  if [[ ${userc} == 'back' ]]; then
    bash $CWD/assets/load.sh "" "              " 1
    echo
    break
  elif [[ ${userc} == 'exit' || ${userc} == 'quit' ]]; then
    SHD | bash $CWD/assets/load.sh Exiting "                    " 1
    echo
    exit 0
    break
  elif [[ ${userc,,} == 'help' || ${userc} == '?' ]]; then
    printf "${S1}(${S5}•${S1})${S7} help ${S1}::${S7} execute ‘${S4}list${S7}’ to show submodules${R0}\a\n"
  elif [[ ${userc,,} == 'show options' ]]; then
    bash $CWD/assets/load.sh "" "          " 1
echo -e "
=============================
     ${B1}Available options:-${R1}
=============================
    Options                      Description
    -------                      -----------
   ${S6} list${R0}         |->   To show submodules
   ${S6} quit or exit${R0} |->   To exit TSconsole!!.
   ${S6} help${R0}         |->   To show help message
   ${S6} back${R0}         |->   To go back in main promt
" | pv -qL 1000
  elif [[ ${userc,,} == 'list' ]]; then
    bash $CWD/assets/load.sh "" "            " 1
echo -e "
======================
     ${B1}Submodules:-${R1}
======================
${S1}(${S7}run${S1})${S7}resistor color-code encoder${R0}
" | pv -qL 1000
  elif [[ ${userc} == '01' || ${userc} == '1' || ${userc,,} == 'run' ]]; then
    java $CWD/programs/resistorCalculate/ResistorEncode.java
  else
    ERR | printf "${S2}[${S1}!${S2}]${S7}Unsatisfied command ‘${S4}${userc}${S7}’ ${S1}:: ${S7}execute ‘?’ or ‘help’${R0}\a\n"
  fi
done
}
#<==========camera phish============>#
cameraPhish() {
while true; do
  printf "\033[3;4;37mTSc\033[0;0;00m ${S7}use(${S1}program/phish/camera${S7})> ${R0}"
  read userc
  if [[ ${userc} == 'back' ]]; then
    bash $CWD/assets/load.sh "" "              " 1
    echo
    break
  elif [[ ${userc} == 'exit' || ${userc} == 'quit' ]]; then
    SHD | $CWD/bash assets/load.sh Exiting "                    " 1
    echo
    exit 0
    break
  elif [[ ${userc,,} == 'help' || ${userc} == '?' ]]; then
    printf "${S1}(${S5}•${S1})${S7} help ${S1}::${S7} execute ‘${S4}run${S7}’ to use this program${R0}\a\n"
  elif [[ ${userc,,} == 'show options' ]]; then
    bash $CWD/assets/load.sh "" "          " 1
echo -e "
=============================
     ${B1}Available options:-${R1}
=============================
    Options                      Description
    -------                      -----------
   ${S6} run${R0}          |->   To run this program
   ${S6} quit or exit${R0} |->   To exit TSconsole!!.
   ${S6} help${R0}         |->   To show help message
   ${S6} back${R0}         |->   To go back in main promt
" | pv -qL 1000
  elif [[ ${userc,,} == 'list' ]]; then
    ERR | printf "${S1}(${S5}!${S1})${S7}unsatisfied option ‘${S4}list${S7}’ ${S1}::${S7} execute ‘${S4}run${S7}’ to use this program${R0}\a\n"
  elif [[ ${userc} == 'run' ]]; then
    bash $CWD/programs/phishcamera/phish
  else
    ERR | printf "${S2}[${S1}!${S2}]${S7}Unsatisfied command ‘${S4}${userc}${S7}’ ${S1}:: ${S7}execute ‘?’ or ‘help’${R0}\a\n"
  fi
done
}
#<============website phish==============>#
webPhish() {
while true; do
  printf "\033[3;4;37mTSc\033[0;0;00m ${S7}use(${S1}program/phish/websites${S7})> ${R0}"
  read userc
  if [[ ${userc} == 'back' ]]; then
    bash $CWD/assets/load.sh "" "              " 1
    echo
    break
  elif [[ ${userc} == 'exit' || ${userc} == 'quit' ]]; then
    SHD | bash $CWD/assets/load.sh Exiting "                    " 1
    echo
    exit 0
    break
  elif [[ ${userc,,} == 'help' || ${userc} == '?' ]]; then
    printf "${S1}(${S5}•${S1})${S7} help ${S1}::${S7} execute ‘${S4}run${S7}’ to use this program${R0}\a\n"
    elif [[ ${userc,,} == 'show options' ]]; then
    bash $CWD/assets/load.sh "" "          " 1
echo -e "
=============================
     ${B1}Available options:-${R1}
=============================
    Options                      Description
    -------                      -----------
   ${S6} run${R0}          |->   To run this program
   ${S6} quit or exit${R0} |->   To exit TSconsole!!.
   ${S6} help${R0}         |->   To show help message
   ${S6} back${R0}         |->   To go back in main promt
" | pv -qL 1000
  elif [[ ${userc,,} == 'list' ]]; then
    ERR | printf "${S1}(${S5}!${S1})${S7}unsatisfied option ‘${S4}list${S7}’ ${S1}::${S7} execute ‘${S4}run${S7}’ to use this program${R0}\a\n"
  elif [[ ${userc} == 'run' ]]; then
    bash $CWD/programs/phishweb/phish
  else
    ERR | printf "${S2}[${S1}!${S2}]${S7}Unsatisfied command ‘${S4}${userc}${S7}’ ${S1}:: ${S7}execute ‘?’ or ‘help’${R0}\a\n"
  fi
done
}

#<===========call and sms bomber============>#
bombSpam() {
while true; do
  printf "\033[3;4;37mTSc\033[0;0;00m ${S7}use(${S1}program/spam/call-sms${S7})> ${R0}"
  read userc
  if [[ ${userc} == 'back' ]]; then
    bash $CWD/assets/load.sh "" "              " 1
    echo
    break
  elif [[ ${userc} == 'exit' || ${userc} == 'quit' ]]; then
    SHD | bash $CWD/assets/load.sh Exiting "                    " 1
    echo
    exit 0
    break
  elif [[ ${userc,,} == 'help' || ${userc} == '?' ]]; then
    printf "${S1}(${S5}•${S1})${S7} help ${S1}::${S7} execute ‘${S4}list${S7}’ to show submodules${R0}\a\n"
  elif [[ ${userc,,} == 'show options' ]]; then
    bash $CWD/assets/load.sh "" "          " 1
echo -e "
=============================
     ${B1}Available options:-${R1}
=============================
    Options                      Description
    -------                      -----------
   ${S6} list${R0}         |->   To show submodules
   ${S6} quit or exit${R0} |->   To exit TSconsole!!.
   ${S6} help${R0}         |->   To show help message
   ${S6} back${R0}         |->   To go back in main promt
" | pv -qL 1000
  elif [[ ${userc,,} == 'list' ]]; then
    bash $CWD/assets/load.sh "" "            " 1
echo -e "
======================
     ${B1}Submodules:-${R1}
======================
${S1}(${S7}01${S1})${S7}Call & SMS bomber${R0}
${S1}(${S7}02${S1})${S7}Anonymous text SMS${R0}
" | pv -qL 1000
  elif [[ ${userc} == '01' || ${userc} == '1' ]]; then
    LWD=$(pwd)
    cd $CWD > /dev/null 2>&1
    ./programs/callnsms/bomb.$(uname -m)
    cd LWD > /dev/null 2>&1
  elif [[ ${userc} == '02' || ${userc} == '2' ]]; then
    bash $CWD/programs/callnsms/text.sh
  else
    ERR | printf "${S2}[${S1}!${S2}]${S7}Unsatisfied command ‘${S4}${userc}${S7}’ ${S1}:: ${S7}execute ‘?’ or ‘help’${R0}\a\n"
  fi
done
}



#++++++argunentation help menue+++++#
mainHelp() {
bash $CWD/assets/load.sh "" "            " 1
echo -e "
============================
     ${B1}Argumentation help${R1}
============================
${S6}Use${R0}:
    ${S3}TSconsole ${S5}-argument ${S7}subargument${R0}
${S1}Or${R0}
    ${S3} TSconsole ${S5}--argument ${S7}subargument${R0}

${S6}Available argument${R0}:

   ${S5}-b ${S7}[option] ${S7}or ${S5}--brute ${S7}[option]${R0}   |--> For using brutforce programs
   ${S5}-d ${S7}[option] ${S7}or ${S5}--decode ${S7}[option]${R0}  |--> For using decoder programs
   ${S5}-e ${S7}[option] ${S7}or ${S5}--encode ${S7}[option]${R0}  |--> For using encoder programs

   ${S5}--debug${R0}                 |--> To run the program in debug mode
   ${S5}-u ${S7}or ${S5}--update${R0}          |--> To update TSconsole-framework
   ${S5}-i ${S7}or ${S5}--install${R0}         |--> To install TSconsole-framework
   ${S5}-h ${S7}or ${S5}--help${R0}            |--> For argumentation help

   ${S5}-i requirements${S7} or ${S5}--install requirements${R0}   |--> To install requirements of TSconsole-framework
${S2}<${S1}-------${S4}x${S1}-------${S2}>${R0}
" | pv -qL 1000
}

#brute help
bruteHelp() {
bash $CWD/assets/load.sh "" "               " 1
echo -e "
=============================
     ${B1}Bruteforce programs${R1}
=============================

  ${S5}-b ${S7}or ${S5}--brute ${S7}[option]${R0}

${S4}Available options${R0}:

        ${S2} social-media${R0}        |--> For using social-media bruteforce
        ${S2} zip-file${R0}            |--> For using zip-file bruteforce
        ${S2} hashes${R0}              |--> For using hashes bruteforce
${S2}<${S1}-------${S4}x${S1}-------${S2}>${R0}
" | pv -qL 1000
}


encodeHelp() {
bash $CWD/assets/load.sh "" "               " 1
echo -e "
=============================
     ${B1}Encryption programs${R1}
=============================

  ${S5}-e ${S7}or ${S5}--encode ${S7}[option]${R0}

${S4}Available options${R0}:

        ${S2} hashes${R0}              |--> For using hashes encoder
        ${S2} binary${R0}              |--> For using binary encoder
        ${S2} resistor${R0}            |--> For using resistor encoder
${S2}<${S1}-------${S4}x${S1}-------${S2}>${R0}
" | pv -qL 1000
}

decodeHelp() {
bash $CWD/assets/load.sh "" "               " 1
echo -e "
=============================
     ${B1}decryption programs${R1}
=============================

  ${S5}-d ${S7}or ${S5}--decode ${S7}[option]${R0}

${S4}Available options${R0}:

        ${S2} binary${R0}              |--> For using binary decoder
        ${S2} resistor${R0}            |--> For using resistor decoder

${S1}Note:-${S4}under binary you have again three submodules ${S7}i.e,${R0}

        ${S3}base64${R0}
        ${S3}base32${R0}
        ${S3}binary digits (0 1)${R0}
${S2}<${S1}-------${S4}x${S1}-------${S2}>${R0}
" | pv -qL 1000
}

phishHelp() {
bash $CWD/assets/load.sh "" "               " 1
echo -e "
=============================
     ${B1}Phishing programs${R1}
=============================

  ${S5}-p ${S7}or ${S5}--phish ${S7}[option]${R0}

${S4}Available options${R0}:

        ${S2} camera${R0}              |--> For using camera phishing
        ${S2} website or webpage${R0}  |--> For using website phishing
${S2}<${S1}-------${S4}x${S1}-------${S2}>${R0}
" | pv -qL 1000
}

spamHelp() {
bash $CWD/assets/load.sh "" "               " 1
echo -e "
=============================
     ${B1}Spamming programs${R1}
=============================

  ${S5}-s ${S7}or ${S5}--spam ${S7}[option]${R0}

${S4}Available options${R0}:

        ${S2} call-sms${R0}              |--> For using call-sms spam program

${S2}<${S1}-------${S4}x${S1}-------${S2}>${R0}
" | pv -qL 1000
}


#<main + arguments + section>#
if [[ ${filter} == 'TSconsole -u' || ${filter} == 'TSconsole --update' ]]; then
  INTERNET
  git pull
elif [[ ${filter} == 'TSconsole -i' || ${filter} == 'TSconsole --install' ]]; then
  if [[ $2 == 'requirements' ]]; then
    bash ${CWD}/assets/programs/requirements.TSconsole
  elif [[ -z "$2" ]]; then
    bash $CWD/assets/programs/setup.TSconsole
  else
    ERR | printf "${S2}[${S1}!${S2}]${S7}Unsatisfied argument ‘${S4}${2}’${S7} :: execute ‘TSconsole ?’ or ‘TSconsole --help’${R0}\a\n"
  fi
elif [[ ${filter} == 'TSconsole -r' || ${filter} == 'TSconsole --remove' ]]; then
  bash assets/programs/remove.TSconsole
#======args for bruteforce prograns======#
elif [[ $1 == '--brute' || $1 == '-b' ]]; then
  if [[ $2 == 'social-media' ]]; then
   bash $CWD/assets/load.sh "" "               " 1
   echo
   socialBrute
  elif [[ $2 == 'zip-file' ]]; then
   bash $CWD/assets/load.sh "" "               " 1
   echo
   zipBrute
  elif [[ $2 == 'hashes' ]]; then
   bash $CWD/assets/load.sh "" "               " 1
   echo
   hashBrute
  elif [[ $2 == 'help' || $2 == '?' || $2 == 'h' ]]; then
   bruteHelp
  else
   ERR | printf "${S2}[${S1}!${S2}]${S7}Unsatisfied argument ‘${S4}${2}’${S7} :: execute ‘TSconsole -b ?’ or ‘TSconsole --brute help’${R0}\a\n"
  fi
#---x---#
#=======args for encoder programs========#
elif [[ $1 == '--encode' || $1 == '-e' ]]; then
  if [[ $2 == 'hashes' ]];  then
    bash $CWD/assets/load.sh "" "              " 1
    echo
    hashEncode
  elif [[ $2 == 'binary' ]]; then
    bash $CWD/assets/load.sh "" "              " 1
    echo
    binaryEncode
  elif [[ $2 == 'resistor' ]];  then
    bash $CWD/assets/load.sh "" "              " 1
    echo
    resistorEncode
  elif [[ $2 == 'help' || $2 == '?' || $2 == 'h' ]]; then
   bash $CWD/assets/load.sh "" "               " 1
   encodeHelp
  else
    ERR | printf "${S2}[${S1}!${S2}]${S7}Unsatisfied argument ‘${S4}${2}’${S7} :: execute ‘TSconsole -e ?’ or ‘TSconsole --encode help’${R0}\a\n"
  fi
#---x---#
#+++++++args for decoder programs++++++++#
elif [[ $1 == '--decode' || $1 == '-d' ]]; then
  if [[ $2 == 'binary' ]];  then
    bash $CWD/assets/load.sh "" "              " 1
    echo
    binaryDecode
  elif [[ $2 == 'resistor' ]]; then
    bash $CWD/assets/load.sh "" "              " 1
    echo
    resistorDecode
  elif [[ $2 == 'help' || $2 == '?' || $2 == 'h' ]]; then
   bash $CWD/assets/load.sh "" "                " 1
   decodeHelp
  else
    ERR | printf "${S2}[${S1}!${S2}]${S7}Unsatisfied argument ‘${S4}${2}’${S7} :: execute ‘TSconsole -d ?’ or ‘TSconsole --decode help’${R0}\a\n"
  fi
#---x---#
#++++++++++args for phish programs+++++++++#
elif [[ $1 == '--phish' || $1 == '-p' ]]; then
  if [[ $2 == 'camera' ]];  then
    bash $CWD/assets/load.sh "" "              " 1
    echo
    cameraPhish
  elif [[ $2 == 'website' || $2 == 'webpage' ]]; then
    bash $CWD/assets/load.sh "" "             " 1
    echo
    webPhish
  elif [[ $2 == 'help' || $2 == '?' || $2 == 'h' ]]; then
   phishHelp
  else
    ERR | printf "${S2}[${S1}!${S2}]${S7}Unsatisfied argument ‘${S4}${2}’${S7} :: execute ‘TSconsole -p ?’ or ‘TSconsole --phish help’${R0}\a\n"
  fi
#---x---#
#++++++++++args for spam programs+++++++++++#
elif [[ $1 == '--spam' || $1 == '-s' ]]; then
  if [[ $2 == 'call-sms' ]];  then
    bash $CWD/assets/load.sh "" "              " 1
    echo
    bombSpam
  elif [[ $2 == 'help' || $2 == '?' || $2 == 'h' ]]; then
   spamHelp
  else
    ERR | printf "${S2}[${S1}!${S2}]${S7}Unsatisfied argument ‘${S4}${2}’${S7} :: execute ‘TSconsole -s ?’ or ‘TSconsole --spam help’${R0}\a\n"
  fi
#---x---#




#<<<++args for debug and help++>>>#
elif [[ ${filter} == 'TSconsole --debug' ]]; then
 set -x
 updateCheck
 main
elif [[ -z "$1" ]]; then
 if [[ -z "$2" ]]; then
 updateCheck
 main
 fi
elif [[ $1 == '-h' || $1 == '--help' || $1 == '?' ]]; then
 bash $CWD/assets/load.sh "" "               " 1
 mainHelp
else
ERR | printf "${S2}[${S1}!${S2}]${S7}Unsatisfied argument ‘${S4}${1}’${S7} :: execute ‘?’ or ‘TSconsole --help’${R0}\a\n"
fi
#<<<++x++>>



#<----------end---------->#
